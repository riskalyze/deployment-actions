name: Terraform action
description: Deploys or destroys AWS infrastructure using Terraform

inputs:
  comment-on-pr:
    description: Whether to add a comment to the PR with the results of the Terraform action. Only valid when this workflow is invoked from a PR event.
    required: false
  environment:
    description: The environment to use, i.e. "production".
    required: true
  github-ssh-key:
    description: An SSH private key with access to clone private module repos.
    required: true
  region:
    description: The AWS region to use.
    required: true
  role-arn:
    description: An AWS role ARN that will be assumed for Terraform operations.
    required: true
  task:
    description: The task to perform. Valid inputs are "plan", "plan-destroy", "apply", and "destroy".
    required: true
  terraform-version:
    description: The version of Terraform to use.
    required: false
    default: 1.2.4
  twingate-service-key:
    description: A Twingate service key that will be used to connect to Twingate.
    required: false
  workspace:
    description: The Terraform workspace to use.
    required: true

runs:
  using: "composite"
  steps:
  - uses: actions/checkout@v3
  - run: echo "${{ github.action_path }}" >> $GITHUB_PATH
    shell: bash
  - name: Setup SOPS
    uses: mdgreenwald/mozilla-sops-action@v1.2.0
  - name: Setup Terraform
    uses: hashicorp/setup-terraform@v1
    with:
      terraform_version: ${{ inputs.terraform-version }}
  - name: Assume AWS role
    uses: aws-actions/configure-aws-credentials@v1
    with:
      aws-region: ${{ inputs.region }}
      role-to-assume: ${{ inputs.role-arn }}
  - name: Connect to Twingate
    uses: twingate/github-action@v1
    if: inputs.twingate-service-key != ''
    with:
      service-key: ${{ inputs.twingate-service-key }}
  - name: Download plan
    if: inputs.task == 'apply' || inputs.task == 'destroy'
    uses: actions/download-artifact@v3
    with:
      name: tfplan
      path: ${{ inputs.workspace }}
  - name: Terraform ${{ inputs.task }}
    id: terraform
    run: terraform.sh
    working-directory: ${{ inputs.workspace }}
    env:
      ENVIRONMENT: ${{ inputs.environment }}
      GIT_SSH_COMMAND: "echo '${{ inputs.github-ssh-key }}' > id_rsa
              && ssh-keyscan github.com > known_hosts
              && chmod 600 id_rsa known_hosts
              && ssh -i ./id_rsa -o UserKnownHostsFile=./known_hosts"
      REGION: ${{ inputs.region }}
      REPO: ${{ github.repository }}
      TASK: ${{ inputs.task }}
      WORKSPACE: ${{ inputs.workspace }}
    shell: bash
  - name: Parse terraform outputs
    id: parse-outputs
    if: always() && inputs.comment-on-pr != ''
    shell: bash
    env:
      STDOUT: ${{ steps.terraform.outputs.stdout }}
      STDERR: ${{ steps.terraform.outputs.stderr }}
    run: |
      if result=$(grep "Plan: " <<< $STDOUT || grep "No changes." <<< $STDOUT); then
        echo ::set-output name=plan_summary::$result
      else
        echo ::set-output name=plan_summary::"Error during plan! See details below."
      fi
  - name: Post plan to PR comment
    if: always() && inputs.comment-on-pr != '' && (steps.terraform.outcome == 'success' || steps.terraform.outcome == 'failure')
    uses: marocchino/sticky-pull-request-comment@v2
    with:
      header: ${{ inputs.environment }}-${{ inputs.workspace }}
      recreate: true
      message: |
        ## Terraform plan ${{ steps.terraform.outcome }} for `${{ inputs.environment }}` workspace `${{ inputs.workspace }}`

        `${{ steps.parse-outputs.outputs.plan_summary }}`

        <details><summary>Show Plan</summary>

        ```hcl
        ${{ steps.terraform.outputs.stdout }}
        ${{ steps.terraform.outputs.stderr }}
        ```

        </details>
  - name: Upload artifact
    uses: actions/upload-artifact@v3
    if: inputs.task == 'plan' || inputs.task == 'plan-destroy'
    with:
      name: tfplan
      path: ${{ inputs.workspace }}/tfplan
